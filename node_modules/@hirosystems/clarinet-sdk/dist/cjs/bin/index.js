#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_fs_1 = __importDefault(require("node:fs"));
const node_path_1 = __importDefault(require("node:path"));
const kolorist_1 = require("kolorist");
const prompts_1 = __importDefault(require("prompts"));
const node_child_process_1 = require("node:child_process");
try {
    main();
}
catch (error) {
    console.error((0, kolorist_1.red)(`Failed to execute init script:\n${error}`));
}
async function main() {
    try {
        await checkIfProjectDirectoryIsValid();
    }
    catch (e) {
        console.warn((0, kolorist_1.yellow)(`Could not initialize Clarinet testing framework:\n${(0, kolorist_1.red)(e.message)}`));
        process.exit(1);
    }
    const sdkBinDir = node_path_1.default.dirname(__filename);
    const projectName = node_path_1.default.basename(node_path_1.default.resolve());
    copyTemplateFiles(sdkBinDir);
    updateClarinetSDKVersion(sdkBinDir);
    updatePackageJSONProjectName(projectName);
    updateGitIgnore();
    updateVSCodeWorkspaceSetting();
    console.log("\n");
    console.log((0, kolorist_1.green)("Project successfully initialised"));
    const result = await (0, prompts_1.default)({
        type: "confirm",
        name: "run",
        message: "Do you want to run npm install now?",
        initial: true,
    });
    if (result.run) {
        const child = (0, node_child_process_1.exec)("npm install");
        child.stdout?.on("data", (data) => {
            console.log(`stdout: ${data}`);
        });
        child.stderr?.on("data", (data) => {
            console.error(`stderr: ${data}`);
        });
        child.on("close", (code) => {
            console.log(`child process exited with code ${code}`);
        });
        await new Promise((resolve, reject) => {
            child.on("exit", resolve);
            child.on("error", reject);
        });
    }
    console.log("\n");
    console.log((0, kolorist_1.green)("You are now ready to test your smart contracts with Vitest and the Clarinet SDK"));
    console.log((0, kolorist_1.green)("Open ./tests/contract.test.ts to see an example"));
}
// check if Clarinet.toml exists and if the Node/NPM boilerplate doesn't
async function checkIfProjectDirectoryIsValid() {
    const isClarinetProject = node_fs_1.default.existsSync(node_path_1.default.join(process.cwd(), "Clarinet.toml"));
    if (!isClarinetProject) {
        throw new Error("Clarinet.toml not found in the current directory. Please run this command in a Clarinet project.");
    }
    const unexpectedFiles = [
        "package.json",
        "vitest.config.js",
        "vitest.config.ts",
        "tsconfig.json",
        "tests/contract.test.ts",
    ];
    for (const unexpectedFile of unexpectedFiles) {
        if (node_fs_1.default.existsSync(node_path_1.default.join(process.cwd(), unexpectedFile))) {
            const errorMsg = `A ${unexpectedFile} file already exists in this directory. It is possible that the testing framework has already been initialised.`;
            throw new Error(errorMsg);
        }
    }
    return true;
}
// copy the Node/NPM boilerplate
function copyTemplateFiles(sdkBinDir) {
    console.log("Copying package.json, tsconfig.json, vitest.config.js and sample test file");
    node_fs_1.default.cpSync(node_path_1.default.join(sdkBinDir, "../../../templates"), node_path_1.default.join(process.cwd(), "."), {
        recursive: true,
    });
}
// update to package.json name to  "<project-name>-tests"
function updatePackageJSONProjectName(projectName) {
    console.log("Updating package.json");
    const packageJSONPath = node_path_1.default.join(process.cwd(), "package.json");
    const packageJSON = JSON.parse(node_fs_1.default.readFileSync(packageJSONPath, "utf-8"));
    packageJSON.name = `${projectName}-tests`;
    node_fs_1.default.writeFileSync(packageJSONPath, JSON.stringify(packageJSON, null, 2));
}
// make sure we the current version of `@hirosystems/clarinet-sdk`
function updateClarinetSDKVersion(sdkBinDir) {
    const sdkPackageJSONPath = node_path_1.default.join(sdkBinDir, "../../../package.json");
    const sdkPackageJSON = JSON.parse(node_fs_1.default.readFileSync(sdkPackageJSONPath, "utf-8"));
    const version = sdkPackageJSON.version;
    const projectPackageJSONPath = node_path_1.default.join(process.cwd(), "package.json");
    const projectPackageJSON = JSON.parse(node_fs_1.default.readFileSync(projectPackageJSONPath, "utf-8"));
    projectPackageJSON.dependencies["@hirosystems/clarinet-sdk"] = `^${version}`;
    node_fs_1.default.writeFileSync(projectPackageJSONPath, JSON.stringify(projectPackageJSON, null, 2));
}
// add node and npm directories to the .gitignore
function updateGitIgnore() {
    console.log("Updating .gitignore");
    const newLines = [
        "logs",
        "*.log",
        "npm-debug.log*",
        "coverage",
        "*.info",
        "costs-reports.json",
        "node_modules",
    ].join("\n");
    const gitIgnorePath = node_path_1.default.join(process.cwd(), ".gitignore");
    if (node_fs_1.default.existsSync(gitIgnorePath)) {
        node_fs_1.default.appendFileSync(gitIgnorePath, "\n# Ignore Node and NPM files. Added by the clarinet-sdk migration.");
        node_fs_1.default.appendFileSync(gitIgnorePath, `\n${newLines}`);
    }
    else {
        node_fs_1.default.writeFileSync(gitIgnorePath, newLines);
    }
}
// disable the deno extension if it's enabled
function updateVSCodeWorkspaceSetting() {
    const vscodeSettingsPath = node_path_1.default.join(process.cwd(), ".vscode", "settings.json");
    if (node_fs_1.default.existsSync(vscodeSettingsPath)) {
        const vscodeSettings = JSON.parse(node_fs_1.default.readFileSync(vscodeSettingsPath, "utf-8"));
        if (vscodeSettings["deno.enable"] === true) {
            (0, kolorist_1.green)("Updating workspace settings");
            vscodeSettings["deno.enable"] = false;
            node_fs_1.default.writeFileSync(vscodeSettingsPath, JSON.stringify(vscodeSettings, null, 2));
        }
    }
}
//# sourceMappingURL=index.js.map