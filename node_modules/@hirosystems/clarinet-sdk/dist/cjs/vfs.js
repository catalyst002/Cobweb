"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.vfs = void 0;
const fs = __importStar(require("node:fs/promises"));
const node_path_1 = __importDefault(require("node:path"));
function fileArrayToString(bufferArray) {
    return Array.from(bufferArray)
        .map((item) => String.fromCharCode(item))
        .join("");
}
function isValidReadEvent(e) {
    return typeof e?.path === "string";
}
function isValidReadManyEvent(e) {
    return Array.isArray(e?.paths) && e.paths.every((s) => typeof s === "string");
}
function isValidWriteEvent(e) {
    return typeof e?.path === "string" && Array.isArray(e?.content);
}
async function exists(event) {
    if (!isValidReadEvent(event))
        throw new Error("invalid read event");
    try {
        await fs.stat(event.path);
        return true;
    }
    catch {
        return false;
    }
}
async function readFile(event) {
    if (!isValidReadEvent(event))
        throw new Error("invalid read event");
    return fileArrayToString(await fs.readFile(event.path));
}
async function readFiles(event) {
    if (!isValidReadManyEvent(event))
        throw new Error("invalid read event");
    const files = await Promise.all(event.paths.map(async (p) => {
        try {
            return fs.readFile(p);
        }
        catch (err) {
            console.warn(err);
            return null;
        }
    }));
    return Object.fromEntries(files.reduce((acc, f, i) => {
        if (f === null)
            return acc;
        return acc.concat([[event.paths[i], fileArrayToString(f)]]);
    }, []));
}
async function writeFile(event) {
    if (!isValidWriteEvent(event))
        throw new Error("invalid write event");
    const dir = node_path_1.default.dirname(event.path);
    if (dir !== ".")
        await fs.mkdir(dir, { recursive: true });
    return fs.writeFile(event.path, Uint8Array.from(event.content));
}
function vfs(action, data) {
    if (action === "vfs/exists")
        return exists(data);
    if (action === "vfs/readFile")
        return readFile(data);
    if (action === "vfs/readFiles")
        return readFiles(data);
    if (action === "vfs/writeFile")
        return writeFile(data);
    throw new Error("invalid vfs action");
}
exports.vfs = vfs;
//# sourceMappingURL=vfs.js.map