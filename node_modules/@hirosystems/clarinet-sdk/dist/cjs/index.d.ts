import { ClarityValue } from "@stacks/transactions";
import { SDK } from "@hirosystems/clarinet-sdk-wasm";
import type { ContractInterface } from "./contractInterface.js";
import { ContractAST } from "./contractAst.js";
type ClarityEvent = {
    event: string;
    data: {
        raw_value?: string;
        value?: ClarityValue;
        [key: string]: any;
    };
};
export type ParsedTransactionResult = {
    result: ClarityValue;
    events: ClarityEvent[];
};
type CallFn = (contract: string, method: string, args: ClarityValue[], sender: string) => ParsedTransactionResult;
type DeployContractOptions = {
    clarityVersion: 1 | 2;
};
type DeployContract = (name: string, content: string, options: DeployContractOptions | null, sender: string) => ParsedTransactionResult;
type TransferSTX = (amount: number | bigint, recipient: string, sender: string) => ParsedTransactionResult;
type Tx = {
    callPublicFn: {
        contract: string;
        method: string;
        args: ClarityValue[];
        sender: string;
    };
    deployContract?: never;
    transferSTX?: never;
} | {
    callPublicFn?: never;
    deployContract: {
        name: string;
        content: string;
        options: DeployContractOptions | null;
        sender: string;
    };
    transferSTX?: never;
} | {
    callPublicFn?: never;
    deployContradct?: never;
    transferSTX: {
        amount: number;
        recipient: string;
        sender: string;
    };
};
export declare const tx: {
    callPublicFn: (contract: string, method: string, args: ClarityValue[], sender: string) => Tx;
    deployContract: (name: string, content: string, options: DeployContractOptions | null, sender: string) => Tx;
    transferSTX: (amount: number, recipient: string, sender: string) => Tx;
};
type MineBlock = (txs: Array<Tx>) => ParsedTransactionResult[];
type GetDataVar = (contract: string, dataVar: string) => ClarityValue;
type GetMapEntry = (contract: string, mapName: string, mapKey: ClarityValue) => ClarityValue;
type GetContractAST = (contractId: string) => ContractAST;
type GetContractsInterfaces = () => Map<string, ContractInterface>;
export type Simnet = {
    [K in keyof SDK]: K extends "callReadOnlyFn" | "callPublicFn" ? CallFn : K extends "deployContract" ? DeployContract : K extends "transferSTX" ? TransferSTX : K extends "mineBlock" ? MineBlock : K extends "getDataVar" ? GetDataVar : K extends "getMapEntry" ? GetMapEntry : K extends "getContractAST" ? GetContractAST : K extends "getContractsInterfaces" ? GetContractsInterfaces : SDK[K];
};
export declare const initSimnet: (manifestPath?: string) => Promise<Simnet>;
export {};
