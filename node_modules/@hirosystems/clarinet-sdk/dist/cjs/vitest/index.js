"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.vitestSetupFilePath = exports.vitestHelpersPath = exports.getClarinetVitestsArgv = void 0;
const yargs_1 = __importDefault(require("yargs"));
const helpers_1 = require("yargs/helpers");
function getClarinetVitestsArgv() {
    const argv = (0, helpers_1.hideBin)(process.argv);
    const topLevel = (0, yargs_1.default)(argv).argv;
    // @ts-ignore
    return (0, yargs_1.default)(topLevel._)
        .option("manifest-path", {
        alias: "manifest",
        type: "string",
        default: "./Clarinet.toml",
    })
        .option("init-before-each", {
        description: "Reinitialize the Clarinet state before each test",
        type: "boolean",
        default: true,
    })
        .option("coverage", {
        alias: "cov",
        type: "boolean",
        default: false,
    })
        .option("costs", {
        alias: "cost",
        type: "boolean",
        default: false,
    })
        .option("coverage-filename", {
        alias: "cov-file",
        type: "string",
        default: "lcov.info",
    })
        .option("costs-filename", {
        alias: "costs-file",
        type: "string",
        default: "costs-reports.json",
    }).argv;
}
exports.getClarinetVitestsArgv = getClarinetVitestsArgv;
exports.vitestHelpersPath = "node_modules/@hirosystems/clarinet-sdk/vitest-helpers/src/";
exports.vitestSetupFilePath = `${exports.vitestHelpersPath}vitest.setup.ts`;
//# sourceMappingURL=index.js.map