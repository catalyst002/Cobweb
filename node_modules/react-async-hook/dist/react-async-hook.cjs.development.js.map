{"version":3,"file":"react-async-hook.cjs.development.js","sources":["../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/index.ts"],"sourcesContent":["// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && !check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, value);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\t_entry(_this).then(returnValue, function(error) {\n\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import {\n  Dispatch,\n  SetStateAction,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from 'react';\n\n// See https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85\nconst useIsomorphicLayoutEffect =\n  typeof window !== 'undefined' &&\n  typeof window.document !== 'undefined' &&\n  typeof window.document.createElement !== 'undefined'\n    ? useLayoutEffect\n    : useEffect;\n\n// Assign current value to a ref and returns a stable getter to get the latest value.\n// This way we are sure to always get latest value provided to hook and\n// avoid weird issues due to closures capturing stale values...\n// See https://github.com/facebook/react/issues/16956\n// See https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nconst useGetter = <T>(t: T) => {\n  const ref = useRef(t);\n  useIsomorphicLayoutEffect(() => {\n    ref.current = t;\n  });\n  return useCallback(() => ref.current, [ref]);\n};\n\ntype UnknownResult = unknown;\n\n// Convenient to avoid declaring the type of args, which may help reduce type boilerplate\n//type UnknownArgs = unknown[];\n// TODO unfortunately it seems required for now if we want default param to work...\n// See https://twitter.com/sebastienlorber/status/1170003594894106624\ntype UnknownArgs = any[];\n\nexport type AsyncStateStatus =\n  | 'not-requested'\n  | 'loading'\n  | 'success'\n  | 'error';\n\nexport type AsyncState<R> = {\n  status: AsyncStateStatus;\n  loading: boolean;\n  error: Error | undefined;\n  result: R | undefined;\n};\ntype SetLoading<R> = (asyncState: AsyncState<R>) => AsyncState<R>;\ntype SetResult<R> = (result: R, asyncState: AsyncState<R>) => AsyncState<R>;\ntype SetError<R> = (error: Error, asyncState: AsyncState<R>) => AsyncState<R>;\n\ntype MaybePromise<T> = Promise<T> | T;\n\ntype PromiseCallbackOptions = {\n  // Permit to know if the success/error belongs to the last async call\n  isCurrent: () => boolean;\n\n  // TODO this can be convenient but need some refactor\n  // params: Args;\n};\n\nexport type UseAsyncOptionsNormalized<R> = {\n  initialState: (options?: UseAsyncOptionsNormalized<R>) => AsyncState<R>;\n  executeOnMount: boolean;\n  executeOnUpdate: boolean;\n  setLoading: SetLoading<R>;\n  setResult: SetResult<R>;\n  setError: SetError<R>;\n  onSuccess: (r: R, options: PromiseCallbackOptions) => void;\n  onError: (e: Error, options: PromiseCallbackOptions) => void;\n};\nexport type UseAsyncOptions<R> =\n  | Partial<UseAsyncOptionsNormalized<R>>\n  | undefined\n  | null;\n\nconst InitialAsyncState: AsyncState<any> = {\n  status: 'not-requested',\n  loading: false,\n  result: undefined,\n  error: undefined,\n};\n\nconst InitialAsyncLoadingState: AsyncState<any> = {\n  status: 'loading',\n  loading: true,\n  result: undefined,\n  error: undefined,\n};\n\nconst defaultSetLoading: SetLoading<any> = _asyncState =>\n  InitialAsyncLoadingState;\n\nconst defaultSetResult: SetResult<any> = (result, _asyncState) => ({\n  status: 'success',\n  loading: false,\n  result: result,\n  error: undefined,\n});\n\nconst defaultSetError: SetError<any> = (error, _asyncState) => ({\n  status: 'error',\n  loading: false,\n  result: undefined,\n  error: error,\n});\n\nconst noop = () => {};\n\nconst DefaultOptions: UseAsyncOptionsNormalized<any> = {\n  initialState: options =>\n    options && options.executeOnMount\n      ? InitialAsyncLoadingState\n      : InitialAsyncState,\n  executeOnMount: true,\n  executeOnUpdate: true,\n  setLoading: defaultSetLoading,\n  setResult: defaultSetResult,\n  setError: defaultSetError,\n  onSuccess: noop,\n  onError: noop,\n};\n\nconst normalizeOptions = <R>(\n  options: UseAsyncOptions<R>\n): UseAsyncOptionsNormalized<R> => ({\n  ...DefaultOptions,\n  ...options,\n});\n\ntype UseAsyncStateResult<R> = {\n  value: AsyncState<R>;\n  set: Dispatch<SetStateAction<AsyncState<R>>>;\n  merge: (value: Partial<AsyncState<R>>) => void;\n  reset: () => void;\n  setLoading: () => void;\n  setResult: (r: R) => void;\n  setError: (e: Error) => void;\n};\nconst useAsyncState = <R extends {}>(\n  options: UseAsyncOptionsNormalized<R>\n): UseAsyncStateResult<R> => {\n  const [value, setValue] = useState<AsyncState<R>>(() =>\n    options.initialState(options)\n  );\n\n  const reset = useCallback(() => setValue(options.initialState(options)), [\n    setValue,\n    options,\n  ]);\n\n  const setLoading = useCallback(() => setValue(options.setLoading(value)), [\n    value,\n    setValue,\n  ]);\n  const setResult = useCallback(\n    (result: R) => setValue(options.setResult(result, value)),\n    [value, setValue]\n  );\n\n  const setError = useCallback(\n    (error: Error) => setValue(options.setError(error, value)),\n    [value, setValue]\n  );\n\n  const merge = useCallback(\n    (state: Partial<AsyncState<R>>) =>\n      setValue({\n        ...value,\n        ...state,\n      }),\n    [value, setValue]\n  );\n\n  return {\n    value,\n    set: setValue,\n    merge,\n    reset,\n    setLoading,\n    setResult,\n    setError,\n  };\n};\n\nconst useIsMounted = (): (() => boolean) => {\n  const ref = useRef<boolean>(false);\n  useEffect(() => {\n    ref.current = true;\n    return () => {\n      ref.current = false;\n    };\n  }, []);\n  return () => ref.current;\n};\n\ntype UseCurrentPromiseReturn<R> = {\n  set: (promise: Promise<R>) => void;\n  get: () => Promise<R> | null;\n  is: (promise: Promise<R>) => boolean;\n};\nconst useCurrentPromise = <R>(): UseCurrentPromiseReturn<R> => {\n  const ref = useRef<Promise<R> | null>(null);\n  return {\n    set: promise => (ref.current = promise),\n    get: () => ref.current,\n    is: promise => ref.current === promise,\n  };\n};\n\nexport type UseAsyncReturn<\n  R = UnknownResult,\n  Args extends any[] = UnknownArgs\n> = AsyncState<R> & {\n  set: (value: AsyncState<R>) => void;\n  merge: (value: Partial<AsyncState<R>>) => void;\n  reset: () => void;\n  execute: (...args: Args) => Promise<R>;\n  currentPromise: Promise<R> | null;\n  currentParams: Args | null;\n};\n\n// Relaxed interface which accept both async and sync functions\n// Accepting sync function is convenient for useAsyncCallback\nconst useAsyncInternal = <R = UnknownResult, Args extends any[] = UnknownArgs>(\n  asyncFunction: (...args: Args) => MaybePromise<R>,\n  params: Args,\n  options?: UseAsyncOptions<R>\n): UseAsyncReturn<R, Args> => {\n  // Fallback missing params, only for JS users forgetting the deps array, to prevent infinite loops\n  // https://github.com/slorber/react-async-hook/issues/27\n  // @ts-ignore\n  !params && (params = []);\n\n  const normalizedOptions = normalizeOptions<R>(options);\n\n  const [currentParams, setCurrentParams] = useState<Args | null>(null);\n\n  const AsyncState = useAsyncState<R>(normalizedOptions);\n\n  const isMounted = useIsMounted();\n  const CurrentPromise = useCurrentPromise<R>();\n\n  // We only want to handle the promise result/error\n  // if it is the last operation and the comp is still mounted\n  const shouldHandlePromise = (p: Promise<R>) =>\n    isMounted() && CurrentPromise.is(p);\n\n  const executeAsyncOperation = (...args: Args): Promise<R> => {\n    // async ensures errors thrown synchronously are caught (ie, bug when formatting api payloads)\n    // async ensures promise-like and synchronous functions are handled correctly too\n    // see https://github.com/slorber/react-async-hook/issues/24\n    const promise: Promise<R> = (async () => asyncFunction(...args))();\n    setCurrentParams(args);\n    CurrentPromise.set(promise);\n    AsyncState.setLoading();\n    promise.then(\n      result => {\n        if (shouldHandlePromise(promise)) {\n          AsyncState.setResult(result);\n        }\n        normalizedOptions.onSuccess(result, {\n          isCurrent: () => CurrentPromise.is(promise),\n        });\n      },\n      error => {\n        if (shouldHandlePromise(promise)) {\n          AsyncState.setError(error);\n        }\n        normalizedOptions.onError(error, {\n          isCurrent: () => CurrentPromise.is(promise),\n        });\n      }\n    );\n    return promise;\n  };\n\n  const getLatestExecuteAsyncOperation = useGetter(executeAsyncOperation);\n\n  const executeAsyncOperationMemo: (...args: Args) => Promise<R> = useCallback(\n    (...args) => getLatestExecuteAsyncOperation()(...args),\n    [getLatestExecuteAsyncOperation]\n  );\n\n  // Keep this outside useEffect, because inside isMounted()\n  // will be true as the component is already mounted when it's run\n  const isMounting = !isMounted();\n  useEffect(() => {\n    const execute = () => getLatestExecuteAsyncOperation()(...params);\n    isMounting && normalizedOptions.executeOnMount && execute();\n    !isMounting && normalizedOptions.executeOnUpdate && execute();\n  }, params);\n\n  return {\n    ...AsyncState.value,\n    set: AsyncState.set,\n    merge: AsyncState.merge,\n    reset: AsyncState.reset,\n    execute: executeAsyncOperationMemo,\n    currentPromise: CurrentPromise.get(),\n    currentParams,\n  };\n};\n\n// override to allow passing an async function with no args:\n// gives more user-freedom to create an inline async function\nexport function useAsync<R = UnknownResult, Args extends any[] = UnknownArgs>(\n  asyncFunction: () => Promise<R>,\n  params: Args,\n  options?: UseAsyncOptions<R>\n): UseAsyncReturn<R, Args>;\nexport function useAsync<R = UnknownResult, Args extends any[] = UnknownArgs>(\n  asyncFunction: (...args: Args) => Promise<R>,\n  params: Args,\n  options?: UseAsyncOptions<R>\n): UseAsyncReturn<R, Args>;\n\nexport function useAsync<R = UnknownResult, Args extends any[] = UnknownArgs>(\n  asyncFunction: (...args: Args) => Promise<R>,\n  params: Args,\n  options?: UseAsyncOptions<R>\n): UseAsyncReturn<R, Args> {\n  return useAsyncInternal(asyncFunction, params, options);\n}\n\ntype AddArg<H, T extends any[]> = ((h: H, ...t: T) => void) extends ((\n  ...r: infer R\n) => void)\n  ? R\n  : never;\n\nexport const useAsyncAbortable = <\n  R = UnknownResult,\n  Args extends any[] = UnknownArgs\n>(\n  asyncFunction: (...args: AddArg<AbortSignal, Args>) => Promise<R>,\n  params: Args,\n  options?: UseAsyncOptions<R>\n): UseAsyncReturn<R, Args> => {\n  const abortControllerRef = useRef<AbortController>();\n\n  // Wrap the original async function and enhance it with abortion login\n  const asyncFunctionWrapper: (...args: Args) => Promise<R> = async (\n    ...p: Args\n  ) => {\n    // Cancel previous async call\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n    }\n    // Create/store new abort controller for next async call\n    const abortController = new AbortController();\n    abortControllerRef.current = abortController;\n\n    try {\n      // @ts-ignore // TODO how to type this?\n      return await asyncFunction(abortController.signal, ...p);\n    } finally {\n      // Unset abortController ref if response is already there,\n      // as it's not needed anymore to try to abort it (would it be no-op?)\n      if (abortControllerRef.current === abortController) {\n        abortControllerRef.current = undefined;\n      }\n    }\n  };\n\n  return useAsync(asyncFunctionWrapper, params, options);\n};\n\n// keep compat with TS < 3.5\ntype LegacyOmit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\n// Some options are not allowed for useAsyncCallback\nexport type UseAsyncCallbackOptions<R> =\n  | LegacyOmit<\n      Partial<UseAsyncOptionsNormalized<R>>,\n      'executeOnMount' | 'executeOnUpdate' | 'initialState'\n    >\n  | undefined\n  | null;\n\nexport const useAsyncCallback = <\n  R = UnknownResult,\n  Args extends any[] = UnknownArgs\n>(\n  asyncFunction: (...args: Args) => MaybePromise<R>,\n  options?: UseAsyncCallbackOptions<R>\n): UseAsyncReturn<R, Args> => {\n  return useAsyncInternal(\n    asyncFunction,\n    // Hacky but in such case we don't need the params,\n    // because async function is only executed manually\n    [] as any,\n    {\n      ...options,\n      executeOnMount: false,\n      executeOnUpdate: false,\n    }\n  );\n};\n"],"names":["useIsomorphicLayoutEffect","window","document","createElement","useLayoutEffect","useEffect","useGetter","t","ref","useRef","current","useCallback","InitialAsyncState","status","loading","result","undefined","error","InitialAsyncLoadingState","defaultSetLoading","_asyncState","defaultSetResult","defaultSetError","noop","DefaultOptions","initialState","options","executeOnMount","executeOnUpdate","setLoading","setResult","setError","onSuccess","onError","normalizeOptions","useAsyncState","useState","value","setValue","reset","merge","state","set","useIsMounted","useCurrentPromise","promise","get","is","useAsyncInternal","asyncFunction","params","normalizedOptions","currentParams","setCurrentParams","AsyncState","isMounted","CurrentPromise","shouldHandlePromise","p","executeAsyncOperation","args","then","isCurrent","getLatestExecuteAsyncOperation","executeAsyncOperationMemo","isMounting","execute","currentPromise","useAsync","useAsyncAbortable","abortControllerRef","asyncFunctionWrapper","abort","abortController","AbortController","signal","useAsyncCallback"],"mappings":"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"}