export declare function isEnum<T extends string, TEnumValue extends number>(enumVariable: {
    [key in T]: TEnumValue;
}, value: number): value is TEnumValue;
export declare class BytesReader {
    source: Uint8Array;
    consumed: number;
    constructor(arr: Uint8Array);
    readBytes(length: number): Uint8Array;
    readUInt32BE(): number;
    readUInt8(): number;
    readUInt16BE(): number;
    readBigUIntLE(length: number): bigint;
    readBigUIntBE(length: number): bigint;
    get readOffset(): number;
    set readOffset(val: number);
    get internalBytes(): Uint8Array;
    readUInt8Enum<T extends string, TEnumValue extends number>(enumVariable: {
        [key in T]: TEnumValue;
    }, invalidEnumErrorFormatter: (val: number) => Error): TEnumValue;
}
