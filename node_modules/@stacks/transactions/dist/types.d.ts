import { AddressHashMode, AddressVersion, TransactionVersion, StacksMessageType } from './constants';
import { StacksPublicKey } from './keys';
import { BytesReader } from './bytesReader';
import { PostCondition, PostConditionPrincipal, LengthPrefixedString, AssetInfo } from './postcondition-types';
import { Payload } from './payload';
import { TransactionAuthField } from './signature';
import { MessageSignature, Address } from './common';
export type StacksMessage = Address | PostConditionPrincipal | LengthPrefixedString | LengthPrefixedList | Payload | MemoString | AssetInfo | PostCondition | StacksPublicKey | TransactionAuthField | MessageSignature;
export declare function serializeStacksMessage(message: StacksMessage): Uint8Array;
export declare function deserializeStacksMessage(bytesReader: BytesReader, type: StacksMessageType, listType?: StacksMessageType): StacksMessage;
export declare function createEmptyAddress(): Address;
export declare function addressFromHashMode(hashMode: AddressHashMode, txVersion: TransactionVersion, data: string): Address;
export declare function addressFromPublicKeys(version: AddressVersion, hashMode: AddressHashMode, numSigs: number, publicKeys: StacksPublicKey[]): Address;
export declare function serializeAddress(address: Address): Uint8Array;
export declare function deserializeAddress(bytesReader: BytesReader): Address;
export declare function serializePrincipal(principal: PostConditionPrincipal): Uint8Array;
export declare function deserializePrincipal(bytesReader: BytesReader): PostConditionPrincipal;
export declare function serializeLPString(lps: LengthPrefixedString): Uint8Array;
export declare function deserializeLPString(bytesReader: BytesReader, prefixBytes?: number, maxLength?: number): LengthPrefixedString;
export declare function codeBodyString(content: string): LengthPrefixedString;
export interface MemoString {
    readonly type: StacksMessageType.MemoString;
    readonly content: string;
}
export declare function createMemoString(content: string): MemoString;
export declare function serializeMemoString(memoString: MemoString): Uint8Array;
export declare function deserializeMemoString(bytesReader: BytesReader): MemoString;
export declare function serializeAssetInfo(info: AssetInfo): Uint8Array;
export declare function deserializeAssetInfo(bytesReader: BytesReader): AssetInfo;
export interface LengthPrefixedList {
    readonly type: StacksMessageType.LengthPrefixedList;
    readonly lengthPrefixBytes: number;
    readonly values: StacksMessage[];
}
export declare function createLPList<T extends StacksMessage>(values: T[], lengthPrefixBytes?: number): LengthPrefixedList;
export declare function serializeLPList(lpList: LengthPrefixedList): Uint8Array;
export declare function deserializeLPList(bytesReader: BytesReader, type: StacksMessageType, lengthPrefixBytes?: number): LengthPrefixedList;
export declare function serializePostCondition(postCondition: PostCondition): Uint8Array;
export declare function deserializePostCondition(bytesReader: BytesReader): PostCondition;
