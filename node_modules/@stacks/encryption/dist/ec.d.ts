export type CipherTextEncoding = 'hex' | 'base64';
export type CipherObject = {
    iv: string;
    ephemeralPK: string;
    cipherText: string;
    cipherTextEncoding?: CipherTextEncoding;
    mac: string;
    wasString: boolean;
};
export type SignedCipherObject = {
    signature: string;
    publicKey: string;
    cipherText: string;
};
export declare enum InvalidPublicKeyReason {
    InvalidFormat = "InvalidFormat",
    IsNotPoint = "IsNotPoint"
}
export declare function aes256CbcEncrypt(iv: Uint8Array, key: Uint8Array, plaintext: Uint8Array): Promise<Uint8Array>;
export declare function hmacSha256(key: Uint8Array, content: Uint8Array): Uint8Array;
export declare function getHexFromBN(bnInput: bigint): string;
export declare function getBytesFromBN(bnInput: bigint): Uint8Array;
export declare function getCipherObjectWrapper(opts: {
    wasString: boolean;
    cipherTextEncoding: CipherTextEncoding;
}): {
    payloadShell: string;
    payloadValuesLength: number;
};
export declare function getSignedCipherObjectWrapper(payloadShell: string): {
    signedPayloadValuesLength: number;
    signedPayloadShell: string;
};
export declare function eciesGetJsonStringLength(opts: {
    contentLength: number;
    wasString: boolean;
    sign: boolean;
    cipherTextEncoding: CipherTextEncoding;
}): number;
export declare function encryptECIES(publicKey: string, content: Uint8Array, wasString: boolean, cipherTextEncoding?: CipherTextEncoding): Promise<CipherObject>;
export declare function decryptECIES(privateKey: string, cipherObject: CipherObject): Promise<Uint8Array | string>;
export declare function signECDSA(privateKey: string, content: string | Uint8Array): {
    publicKey: string;
    signature: string;
};
export declare function verifyECDSA(content: string | Uint8Array, publicKey: string, signature: string): boolean;
interface VerifyMessageSignatureArgs {
    signature: string;
    message: string | Uint8Array;
    publicKey: string;
}
export declare function verifyMessageSignature({ signature, message, publicKey, }: VerifyMessageSignatureArgs): boolean;
export declare function verifyMessageSignatureRsv({ signature, message, publicKey, }: VerifyMessageSignatureArgs): boolean;
export {};
