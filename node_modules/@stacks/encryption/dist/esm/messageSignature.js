import { sha256 } from '@noble/hashes/sha256';
import { concatBytes, utf8ToBytes } from '@stacks/common';
import { decode, encode, encodingLength } from './varuint';
const chainPrefix = '\x17Stacks Signed Message:\n';
export function hashMessage(message, prefix = chainPrefix) {
    return sha256(encodeMessage(message, prefix));
}
export function encodeMessage(message, prefix = chainPrefix) {
    const messageBytes = typeof message == 'string' ? utf8ToBytes(message) : message;
    const encodedLength = encode(messageBytes.length);
    return concatBytes(utf8ToBytes(prefix), encodedLength, messageBytes);
}
export function decodeMessage(encodedMessage, prefix = chainPrefix) {
    const prefixByteLength = utf8ToBytes(prefix).byteLength;
    const messageWithoutChainPrefix = encodedMessage.subarray(prefixByteLength);
    const decoded = decode(messageWithoutChainPrefix);
    const varIntLength = encodingLength(decoded);
    return messageWithoutChainPrefix.slice(varIntLength);
}
//# sourceMappingURL=messageSignature.js.map