type NodeCryptoCreateHash = typeof import('crypto').createHash;
export interface Sha2Hash {
    digest(data: Uint8Array, algorithm?: 'sha256' | 'sha512'): Promise<Uint8Array>;
}
export declare class NodeCryptoSha2Hash {
    createHash: NodeCryptoCreateHash;
    constructor(createHash: NodeCryptoCreateHash);
    digest(data: Uint8Array, algorithm?: string): Promise<Uint8Array>;
}
export declare class WebCryptoSha2Hash implements Sha2Hash {
    subtleCrypto: SubtleCrypto;
    constructor(subtleCrypto: SubtleCrypto);
    digest(data: Uint8Array, algorithm?: string): Promise<Uint8Array>;
}
export declare function createSha2Hash(): Promise<Sha2Hash>;
export declare function hashSha256Sync(data: Uint8Array): Uint8Array;
export declare function hashSha512Sync(data: Uint8Array): Uint8Array;
export {};
